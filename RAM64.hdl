// This file is BASED ON part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: project03starter/a/RAM64.hdl

/**
 * Memory of 64 registers, each 8 bits wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[8], load, address[6];
    OUT out[8];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=out1,b=out2,c=out3,d=out4,e=out5,f=out6,g=out7,h=out8);
    RAM8(in=in, load=out1, address= address[0..2], out=ram8out1);
    RAM8(in=in, load=out2, address= address[0..2], out=ram8out2);
    RAM8(in=in, load=out3, address= address[0..2], out=ram8out3);
    RAM8(in=in, load=out4, address= address[0..2], out=ram8out4);
    RAM8(in=in, load=out5, address= address[0..2], out=ram8out5);
    RAM8(in=in, load=out6, address= address[0..2], out=ram8out6);
    RAM8(in=in, load=out7, address= address[0..2], out=ram8out7);
    RAM8(in=in, load=out8, address= address[0..2], out=ram8out8);
    Mux8Way8(a=ram8out1,b=ram8out2,c=ram8out3,d=ram8out4,e=ram8out5,f=ram8out6,g=ram8out7,h=ram8out8, sel=address[3..5], out=out);
}
