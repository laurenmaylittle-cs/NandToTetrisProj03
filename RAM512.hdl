// This file is BASED ON part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: project03starter/b/RAM512.hdl

/**
 * Memory of 512 registers, each 8 bits wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[8], load, address[9];
    OUT out[8];

    PARTS:
    // Your code here
    /* REMEMBER: use the built-in RAM64 chip, not your one from part a/.
     * Since the built-in version is 16 bits wide, you will need to wire
     * it up using sub-buses, so that you use only the bottom 8 bits of
     * RAM64's 'in' and 'out' buses. That should be easy, if you've got
     * this far. */

    DMux8Way(in=load, sel=address[6..8], a=out1,b=out2,c=out3,d=out4,e=out5,f=out6,g=out7,h=out8);
    RAM64(in[0..7]=in, load=out1, address= address[0..5], out[0..7]=ram64out1);
    RAM64(in[0..7]=in, load=out2, address= address[0..5], out[0..7]=ram64out2);
    RAM64(in[0..7]=in, load=out3, address= address[0..5], out[0..7]=ram64out3);
    RAM64(in[0..7]=in, load=out4, address= address[0..5], out[0..7]=ram64out4);
    RAM64(in[0..7]=in, load=out5, address= address[0..5], out[0..7]=ram64out5);
    RAM64(in[0..7]=in, load=out6, address= address[0..5], out[0..7]=ram64out6);
    RAM64(in[0..7]=in, load=out7, address= address[0..5], out[0..7]=ram64out7);
    RAM64(in[0..7]=in, load=out8, address= address[0..5], out[0..7]=ram64out8);
    Mux8Way8(a=ram64out1,b=ram64out2,c=ram64out3,d=ram64out4,e=ram64out5,f=ram64out6,g=ram64out7,h=ram64out8, sel=address[6..8], out=out);
}
